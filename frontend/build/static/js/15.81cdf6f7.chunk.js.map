{"version":3,"sources":["static/videos sync /^/.*$","static/videos/test.mp4","pages/Media/VideoPlayer/VideoPlayer.tsx","api/videos.ts"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","GriffithPlayer","generateSources","sd","play_url","props","sd_url","hd","hd_url","play_id","this","sources","Component","VideoPlayer","state","frontend_videos","backend_videos","playing_id","playing_hd_url","playing_sd_url","handle_GriffithPlayer_onClick","video_type","target","name","substring","video_name","console","log","require","default","process","setState","generateVideoButtons","videos","video_buttons","video","onClick","request","url","method","then","response","data","frontend","videolist","backend","frontend_video_buttons","backend_video_buttons","className"],"mappings":"0FAAA,IAAIA,EAAM,CACT,aAAc,KAIf,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,K,uDCtBpB,OAAe,cAA0B,kC,qHCOnCY,E,4MAEFC,gBAAkB,WAGd,MAAO,CACHC,GAAI,CACAC,SAJO,EAAKC,MAAMC,QAMtBC,GAAI,CACAH,SANO,EAAKC,MAAMG,U,4CAW9B,WACI,IAAMC,EAAUC,KAAKL,MAAMI,QACrBE,EAAUD,KAAKR,kBACrB,OACI,cAAC,IAAD,CACIb,GAAIoB,EACJE,QAASA,Q,GArBIC,aA2BvBC,E,4MACFC,MAAQ,CACJC,gBAAiB,GACjBC,eAAgB,GAEhBC,WAAY,IACZC,eAAgB,GAChBC,eAAgB,I,EAgBpBC,8BAAgC,SAAC3B,GAC7B,IAAM4B,EAAa5B,EAAE6B,OAAOC,KAAKC,UAAU,EAAE,GACvCC,EAAahC,EAAE6B,OAAOC,KAAKC,UAAU,GAC3CE,QAAQC,IAAI,gBAAiBF,GAC7BC,QAAQC,IAAI,cAAeN,GAE3B,IAAIb,EAAS,GACTF,EAAS,GACE,KAAZe,GAECb,EAASoB,OAAQ,KAA0BH,GAAYI,QACvDvB,EAASsB,OAAQ,KAA0BH,GAAYI,SAEtC,KAAZR,IACLb,EAASsB,kBAAwCL,EACjDnB,EAASwB,kBAAwCL,GAGrD,EAAKM,SAAS,CACVd,WAAiBQ,EACjBP,eAAiBV,EACjBW,eAAiBb,K,EAIzB0B,qBAAuB,SAACC,GACpB,IAAIC,EAAa,OAAID,QAAJ,IAAIA,OAAJ,EAAIA,EAAQ/C,KACrB,SAACiD,GACG,OAEQ,aADA,CACA,UAAQZ,KAAMY,EACNC,QAAS,EAAKhB,8BADtB,gBAGKe,QAHL,IAGKA,OAHL,EAGKA,EAAOX,UAAU,QAM1C,OADAE,QAAQC,IAAI,iBAAkBO,GACvBA,G,uDApDX,WAA2B,IAAD,OClCnBG,YAAQ,CACXC,IAAQ,uBACRC,OAAQ,QDiCOC,MAAK,SAACC,GACjB,IAAM1B,EAAkB0B,EAASC,KAAKC,SAASC,UACzC5B,EAAiByB,EAASC,KAAKG,QAAQD,UAC7ClB,QAAQC,IAAI,kBAAmBc,EAASC,MAExC,EAAKX,SAAS,CACVhB,gBAAmBA,EACnBC,eAAmBA,S,oBA+C/B,WAEI,IAAM8B,EAAyBpC,KAAKsB,qBAAqBtB,KAAKI,MAAMC,iBAC9DgC,EAAwBrC,KAAKsB,qBAAqBtB,KAAKI,MAAME,gBAE7DC,EAAaP,KAAKI,MAAMG,WACxBC,EAAiBR,KAAKI,MAAMI,eAC5BC,EAAiBT,KAAKI,MAAMK,eAElC,OACI,gCACI,uDACA,sBAAK6B,UAAW,iBAAhB,UAEI,cAAC,EAAD,CACIvC,QAAWQ,EACXT,OAAUU,EACVZ,OAAUa,IAGd,6DAA2B2B,EAA3B,OACA,yDAA4BC,EAA5B,iB,GAtFMnC,aA8FXC","file":"static/js/15.81cdf6f7.chunk.js","sourcesContent":["var map = {\n\t\"./test.mp4\": 391\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 321;","export default __webpack_public_path__ + \"static/media/test.78ddc4d2.mp4\";","import React, {Component, ReactNode} from 'react';\r\n\r\nimport Player from 'griffith' //https://github.com/zhihu/griffith/blob/master/README-zh-Hans.md\r\n\r\nimport {getVideoList, getVideoUrl} from '../../../api/videos'\r\nimport \"./VideoPlayer.css\"\r\n\r\nclass GriffithPlayer extends Component<any, any> {\r\n\r\n    generateSources = () => {\r\n        const sd_url = this.props.sd_url;\r\n        const hd_url = this.props.hd_url;\r\n        return {\r\n            sd: {\r\n                play_url: sd_url\r\n            },\r\n            hd: {\r\n                play_url: hd_url\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const play_id = this.props.play_id\r\n        const sources = this.generateSources()\r\n        return (\r\n            <Player\r\n                id={play_id}\r\n                sources={sources}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nclass VideoPlayer extends Component<any, any> {\r\n    state = {\r\n        frontend_videos: [],\r\n        backend_videos: [],\r\n\r\n        playing_id: '0',\r\n        playing_hd_url: '',\r\n        playing_sd_url: ''\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        getVideoList().then((response)=>{\r\n            const frontend_videos = response.data.frontend.videolist;\r\n            const backend_videos = response.data.backend.videolist;\r\n            console.log('getVideoList():', response.data)\r\n\r\n            this.setState({\r\n                frontend_videos:   frontend_videos,\r\n                backend_videos:    backend_videos,\r\n            })\r\n        })\r\n    }\r\n\r\n    handle_GriffithPlayer_onClick = (e:any) => {\r\n        const video_type = e.target.name.substring(0,1)\r\n        const video_name = e.target.name.substring(2);\r\n        console.log('button click:', video_name);\r\n        console.log('video type:', video_type);\r\n\r\n        let hd_url = '';\r\n        let sd_url = '';\r\n        if(video_type=='F'){\r\n            // 文件夹作为变量传入require不行，必须在require()中写死，且build时文件夹下全部文件将被打包\r\n            hd_url = require('../../../static/videos/'+video_name).default\r\n            sd_url = require('../../../static/videos/'+video_name).default\r\n        }\r\n        else if (video_type=='B'){\r\n            hd_url = process.env.REACT_APP_URL+'/video/get/'+video_name;\r\n            sd_url = process.env.REACT_APP_URL+'/video/get/'+video_name;\r\n        }\r\n\r\n        this.setState({\r\n            playing_id :     video_name,\r\n            playing_hd_url : hd_url,\r\n            playing_sd_url : sd_url\r\n        })\r\n    }\r\n\r\n    generateVideoButtons = (videos?: string[]) : ReactNode => {\r\n        let video_buttons = (videos?.map(\r\n                (video?:string)=>{\r\n                    return (\r\n                            //console.log(video);\r\n                            <button name={video}\r\n                                    onClick={this.handle_GriffithPlayer_onClick}\r\n                            >\r\n                                {video?.substring(2)}\r\n                            </button>\r\n                        )\r\n                }\r\n            ))\r\n        console.log('video_buttons:', video_buttons)\r\n        return video_buttons\r\n    }\r\n\r\n    render() {\r\n\r\n        const frontend_video_buttons = this.generateVideoButtons(this.state.frontend_videos);\r\n        const backend_video_buttons = this.generateVideoButtons(this.state.backend_videos);\r\n\r\n        const playing_id = this.state.playing_id;\r\n        const playing_hd_url = this.state.playing_hd_url;\r\n        const playing_sd_url = this.state.playing_sd_url;\r\n\r\n        return (\r\n            <div>\r\n                <p> This is VideoPlayer! </p>\r\n                <div className={'GriffithPlayer'} >\r\n\r\n                    <GriffithPlayer\r\n                        play_id = {playing_id}\r\n                        hd_url = {playing_hd_url}\r\n                        sd_url = {playing_sd_url}\r\n                    />\r\n\r\n                    <p> Frontend Local Videos：{frontend_video_buttons} </p>\r\n                    <p> Backend Local Videos:  {backend_video_buttons} </p>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default VideoPlayer;","import request from \"../utils/request\";\r\n\r\nexport const getVideoUrl = (videoname: string) => {\r\n    return request({\r\n        url:    '/video/get/'+videoname,\r\n        method: 'get',\r\n    })\r\n}\r\n\r\nexport const getVideoList = () => {\r\n    return request({\r\n        url:    '/video/videolist/get',\r\n        method: 'get',\r\n    })\r\n}\r\n\r\n"],"sourceRoot":""}