{"version":3,"sources":["components/TreeDisplayer/TreeDisplayer.tsx","pages/Tree/Tree.tsx"],"names":["TreeNode","isLeaf","data","prop","node","Array","isArray","children","length","renderBtn","onExpand","cls","expand","push","React","createElement","key","id","className","join","onClick","e","stopPropagation","renderLabel","label","renderContent","childNodes","vnode","collapsable","labelWidth","labelClassName","toString","style","width","renderChildren","list","map","item","renderNode","this","props","Component","TreeDisplayer","console","log","expandAll","toggleExpand","nodeData","collapse","forceUpdate","_this","forEach","child","val","horizontal","classnames","handleExpand","IndicatorTreeDisplay","Tree"],"mappings":"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","file":"static/js/20.59220313.chunk.js","sourcesContent":["import React, {Component, ReactNode} from 'react';\r\nimport classnames from 'classnames';\r\n\r\nimport './TreeDisplayer.css';\r\n\r\nclass TreeNode extends Component<any, any> {\r\n    isLeaf = (data:any, prop:any) => {\r\n        const node = prop.node;\r\n        return !(Array.isArray(data[node.children]) && data[node.children].length > 0);\r\n    };\r\n\r\n    // 创建展开折叠按钮\r\n    renderBtn = (data:any, prop:any ) => {\r\n        const { onExpand } = prop;\r\n        const node = prop.node;\r\n\r\n        let cls = ['org-tree-node-btn'];\r\n\r\n        if (data[node.expand]) {\r\n            cls.push('expanded');\r\n        }\r\n\r\n        return React.createElement('span', {\r\n            key: data.id,\r\n            className: cls.join(' '),\r\n            onClick: (e) => {\r\n                e.stopPropagation();\r\n                typeof onExpand === 'function' && onExpand(e, data);\r\n            }\r\n        });\r\n    };\r\n\r\n    // 创建 label 节点\r\n    renderLabel = (data:any, prop:any) => {\r\n        const node = prop.node;\r\n        const label = data[node.label];\r\n        const renderContent = prop.renderContent;\r\n        const onClick = prop.onClick;\r\n        const childNodes = [];\r\n\r\n        if (typeof renderContent === 'function') {\r\n            let vnode = renderContent(data);\r\n\r\n            vnode && childNodes.push(vnode);\r\n        } else {\r\n            childNodes.push(label);\r\n        }\r\n\r\n        if (prop.collapsable && !this.isLeaf(data, prop)) {\r\n            childNodes.push(this.renderBtn(data, prop));\r\n        }\r\n\r\n        const cls = ['org-tree-node-label-inner'];\r\n\r\n        let { labelWidth, labelClassName } = prop;\r\n        if (typeof labelWidth === 'number') {\r\n            labelWidth = labelWidth.toString() + 'px';\r\n        }\r\n\r\n        labelClassName && cls.push(labelClassName);\r\n\r\n        //labelWidth = '10px';\r\n        const result =  React.createElement('div',\r\n                                   {\r\n                                            key: `label_${data.id}`,\r\n                                            className: 'org-tree-node-label',\r\n                                            onClick: (e) => typeof onClick === 'function' && onClick(e, data)\r\n                                           },\r\n                                   [React.createElement('div',\r\n                                                                {\r\n                                                                        key: `label_inner_${data.id}`,\r\n                                                                        className: cls.join(' '),\r\n                                                                        style: { width: labelWidth }\r\n                                                                       },\r\n                                                                childNodes)\r\n                                            ]\r\n                                   );\r\n        //console.log('renderLabel result:', result);\r\n        return result;\r\n    };\r\n\r\n    // 创建 node 子节点\r\n    // @ts-ignore\r\n    renderChildren = (list:any, prop:any) => {\r\n        if (Array.isArray(list) && list.length) {\r\n            // @ts-ignore\r\n            const children = list.map(item => {\r\n                return this.renderNode(item, prop);\r\n            });\r\n            return React.createElement('div', {\r\n                key: `children_${children[0].key}`,\r\n                className: 'org-tree-node-children'\r\n            }, children);\r\n        }\r\n        return '';\r\n    };\r\n\r\n    // 创建 node 节点\r\n    // @ts-ignore\r\n    renderNode = (data:any, prop:any) => {\r\n        const node = prop.node;\r\n        const cls = ['org-tree-node'];\r\n        const childNodes = [];\r\n\r\n        // 是否叶子节点，决定className的格式\r\n        if (this.isLeaf(data, prop)) {\r\n            cls.push('is-leaf');\r\n        } else if (prop.collapsable && !data[node.expand]) {\r\n            cls.push('collapsed');\r\n        }\r\n\r\n        // 把自身推进childNodes\r\n        childNodes.push(this.renderLabel(data, prop));\r\n\r\n        // 如果不可折叠，直接全部渲染出来 data[node.expand]不太清楚\r\n        if (!prop.collapsable || data[node.expand]) {\r\n            childNodes.push(this.renderChildren(data.children, prop));\r\n        }\r\n\r\n        const result:ReactNode = React.createElement('div',\r\n                                           {\r\n                                                    key: data.id,\r\n                                                    className: cls.join(' ')\r\n                                                  },\r\n                                            childNodes);\r\n        //console.log('renderNode result:', result);\r\n        return result;\r\n    };\r\n\r\n    render() {\r\n        const data = this.props.data;\r\n        const prop = this.props;\r\n        const render_res = this.renderNode(data, prop);\r\n        return (\r\n            render_res\r\n        )\r\n    }\r\n}\r\n\r\nexport default class TreeDisplayer extends Component<any, any> {\r\n\r\n    componentDidMount() {\r\n        console.log('TreeDisplayer componentDidMount');\r\n        const { expandAll, data } = this.props;\r\n        if(expandAll) this.toggleExpand(data, true);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n    }\r\n\r\n    handleExpand(e:any, nodeData:any) {\r\n        if ('expand' in nodeData) {\r\n            nodeData.expand = !nodeData.expand;\r\n            if (!nodeData.expand && nodeData.children) {\r\n                this.collapse(nodeData.children);\r\n            }\r\n            this.forceUpdate();\r\n        }else {\r\n            nodeData.expand = true;\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    collapse(list:any) {\r\n        let _this = this;\r\n        list.forEach(function(child:any) {\r\n            if (child.expand) {\r\n                child.expand = false;\r\n            }\r\n            child.children && _this.collapse(child.children);\r\n        });\r\n    }\r\n\r\n    toggleExpand(data:any, val:any) {\r\n        let _this = this;\r\n        if (Array.isArray(data)) {\r\n            data.forEach(function(item) {\r\n                item.expand = val;\r\n                if (item.children) {\r\n                    _this.toggleExpand(item.children, val);\r\n                }\r\n            });\r\n        } else {\r\n            data.expand = val;\r\n            if (data.children) {\r\n                _this.toggleExpand(data.children, val);\r\n            }\r\n        }\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render() {\r\n        const { horizontal, onClick } = this.props;\r\n        //console.log('Input Props:', this.props);\r\n        const node = {\r\n                label: 'label',\r\n                expand: 'expand',\r\n                children: 'children'\r\n            }\r\n\r\n        return  (\r\n            <div className=\"org-tree-container\">\r\n                <div className={classnames('org-tree', { 'horizontal': horizontal })}>\r\n                    <TreeNode\r\n                        node = {node}\r\n                        onExpand={(e:any, nodeData:any)=> this.handleExpand(e, nodeData)}\r\n                        onClick={(e:any, nodeData:any)=> onClick && onClick(e, nodeData)}\r\n                        {...this.props}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, {Component} from 'react';\r\n\r\n\r\nimport TreeDisplayer from \"../../components/TreeDisplayer/TreeDisplayer\";\r\nimport '../../components/TreeDisplayer/TreeDisplayer.css';\r\n\r\nclass IndicatorTreeDisplay extends Component<any, any> {\r\n    renderContent = function(data:any) {\r\n            return data.label;\r\n        }\r\n\r\n    render(){\r\n        const data = {\r\n            id: 0,\r\n            label: 'XXX股份有限公司',\r\n            children: [\r\n                        {\r\n                            id: 1,\r\n                            label: '技术部',\r\n                            children: [{\r\n                                id: 4,\r\n                                label: '后端工程师'\r\n                            }, {\r\n                                id: 5,\r\n                                label: '前端工程师'\r\n                            }, {\r\n                                id: 6,\r\n                                label: '运维工程师'\r\n                            }]\r\n                        },\r\n                        {\r\n                            id: 2,\r\n                            label: '人事部'\r\n                        },\r\n                        {\r\n                            id: 3,\r\n                            label: '销售部'\r\n                        }]\r\n            }\r\n        const horizontal = true; // true：横向  false：纵向\r\n        const collapsable = true; // true：可折叠 false：不可折叠\r\n        const expandAll = true; // true: 全部展开 false：全部折叠\r\n\r\n        const node = {\r\n                label: 'label',\r\n                expand: 'expand',\r\n                children: 'children'\r\n            }\r\n\r\n        return (\r\n            <div>\r\n                <TreeDisplayer\r\n                    data={data}\r\n                    horizontal={horizontal}\r\n                    collapsable={collapsable}\r\n                    expandAll={expandAll}\r\n                    renderContent = {this.renderContent}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Tree extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>This is tree displayer!</p>\r\n                <IndicatorTreeDisplay/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tree;"],"sourceRoot":""}